#!/bin/bash
#
# See usage() for documentation
#

set -e
URLBASE=${DISTRIB_URL-"rsync://moya.dev.lsstcorp.org/dmstack"}

usage()
{
	cat 1>&2 <<-EOF;
		Clones a pre-built binary distribution of the LSST Data Management
		Software Stack.
	
		Usage:
		
		        $CMD [-h|--help] [update|install]
		        
		Examples:
		
		        $CMD install
		        $CMD update

		Arguments:

		install		Install the binary distribution of DM stack
		update		Update an existing binary distribution install

		Environment variables:
		
		CHECK_PREREQ	If set to 0, won't check for prerequisites.
		DISTRIB_URL	If set, override the default remote location from
		                which the binaries will be downloaded
		LSST_HOME	EXPERIMENTAL: Install the stack to \$LSST_HOME, rather
		                than the directory it was originally built in. This
		                is an experimental feature and may cause some
		                application to misbehave.

EOF
	exit -2;
}

detectOS()
{
	OS=$(uname)
	MACH=$(uname -m)

	case $OS in
	"Darwin")
		OS=osx
		VER=$(sw_vers -productVersion | cut -d . -f 1-2)
		;;
	"Linux")
		if [ -f /etc/redhat-release ]; then
			OS="rhel"
			VER=$(cat /etc/redhat-release | sed -r 's/^.[^0-9.]*([0-9]*).*$/\1/')
		elif [ -f /etc/lsb-release ]; then
			# May not work with anything other than Ubuntu
			. /etc/lsb-release
			OS=${DISTRIB_ID,,}		# convert to lowercase (Ubuntu -> ubuntu)
			VER=${DISTRIB_RELEASE//./}	# remove any dots (12.04 -> 1204)
		else
			echo "Unknown Linux flavor; please install from source." 1>&2
			exit -1
		fi
		;;
	*)
		echo "Unsupported operating system. Try installing from source" 1>&2
		exit -1
		;;
	esac
	
	echo $OS-$VER-$MACH
}

checkPrereq()
{
	OS="$1"
	MACH=$(echo "$OS" | cut -d- -f 3)

	[[ $CHECK_PREREQ == 0 ]] && return 0

	case $OS in
	rhel-6-*)
		for rpm in rsync patch gcc-c++ gcc-gfortran flex bison tk-devel \
			   libXt-devel ncurses-devel readline-devel \
			   openssl-devel atlas \
			   libuuid-devel zlib-devel bzip2-devel perl make; \
		do
			rpm --quiet -q "$rpm.$MACH" || { MISSING_RPMS="$MISSING_RPMS $rpm"; }
		done
		if [[ ! -z $MISSING_RPMS ]]; then
			echo "Missing prerequisites: $MISSING_RPMS" 1>&2
			echo "As root, run:" 1>&2
			echo "    yum install $MISSING_RPMS" 1>&2
			exit -1
		fi
		;;
	rhel-5-*)
		for rpm in rsync patch which perl make gcc-c++ flex bison libX11-devel tk-devel \
			   readline-devel zlib-devel gcc44-c++ gcc44-gfortran openssl-devel \
			   e2fsprogs-devel bzip2-devel libXt-devel libstdc++44-devel; \
		do
			rpm --quiet -q "$rpm.$MACH" || { MISSING_RPMS="$MISSING_RPMS $rpm"; }
		done
		if [[ ! -z $MISSING_RPMS ]]; then
			echo "Missing prerequisites: $MISSING_RPMS" 1>&2
			echo "As root, run:" 1>&2
			echo "    yum install $MISSING_RPMS" 1>&2
			exit -1
		fi
		;;
	ubuntu-1204-*)
		for deb in rsync curl patch debianutils libx11-dev \
			   libreadline6-dev zlib1g-dev dpkg-dev libbz2-dev \
			   gfortran libxaw7-dev libfreetype6-dev \
			   texlive-latex-base tcl-dev g++ gfortran git-core \
			   autoconf automake libtool m4 make flex bison \
			   patch libuuid1 uuid-dev latex2html libxaw7-dev \
			   zlib1g-dev libbz2-dev doxygen graphviz \
			   libgsl0-dev python-dev python-setuptools \
			   python-numpy python-matplotlib libssl-dev
		do
			# Note: this is not careful about whether the package for the correct
			# architecture is installed. I'll leave it up to someone with more dpkg-foo.

			dpkg -s "$deb" >/dev/null 2>&1 || { MISSING_DEBS="$MISSING_DEBS $deb"; }
		done
		if [[ ! -z $MISSING_DEBS ]]; then
			echo "Missing prerequisites: $MISSING_DEBS" 1>&2
			echo "As root, run:" 1>&2
			echo "    apt-get install $MISSING_DEBS" 1>&2
			exit -1
		fi
		;;
	esac
}

getAvailableStacks()
{
	rsync $1 | grep "^d" | grep -v ".* \.$" | awk '{print $5}'
	[[ ${PIPESTATUS[0]} == 0 ]] || { echo $'\n'"Error connecting to rsync server. Your firewall may be blocking the connection, or the server may be down." 1>&2; exit -1; }
}

containsElement()
{
	local e
	for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
	return 1
}

###########

CMD=$(basename "$0")

[[ $1 == "--help" || $1 == "-h" ]] && usage
containsElement "$1" install update || usage

# rerun the script from $TMPDIR. This is to avoid the annoying feature of bash
# where it doesn't load the entire script into memory at once, but executes
# commands as it reads through the file. If the file changes in the
# meantime (e.g., lsst-distrib self-updates), bash gets confused.
if [[ -z "$BINCOPY" ]]; then
	export BINCOPY="$(mktemp -d -t XXXXXXX)/$CMD"
	cp -a "$0" "$BINCOPY"
	chmod +x "$BINCOPY"
	exec "$BINCOPY" "$@"
fi

[[ -z "$LSST_HOME" ]] && unset LSST_HOME
OS=$(detectOS)
ROOT=${LSST_HOME-/opt/lsst/$OS}

if [[ -f "$ROOT/.os" ]]; then
	OS=$(head -n 1 "$ROOT/.os")
else
	# Allow the user to change the auto-detected OS
	STACKS=( $(getAvailableStacks "$URLBASE") )
	[[ $? == 0 ]] || exit
	containsElement "$OS" "${STACKS[@]}" && SUPP="supported" || SUPP="UNSUPPORTED"
	while true; do
		echo    "Install version for which platform (destination: $ROOT)?"
		echo    "   Available platforms: ${STACKS[@]}"
		echo    "   Detected platform:   $OS ($SUPP)"
		read -p "Enter platform, press ENTER to use '$OS', or CTRL-C to quit: " os

		[[ -z "$os" ]] && os="$OS"

		if ! containsElement "$os" "${STACKS[@]}"; then
			echo
			echo "No binary distribution is available for platform '$os'."
			echo
		else
			break
		fi
	done
	echo

	OS="$os"
	ROOT=${LSST_HOME-/opt/lsst/$OS}

	# If there's a mismatch with what's in $ROOT/.os, ask for confirmation
	if [[ -f "$ROOT/.os" ]]; then
		OS_STORED=$(head -n 1 "$ROOT/.os")
		if [[ $OS != $OS_STORED ]]; then
			while true; do
				echo "You've elected to install the distribution for platform $OS, but the" \
				     "directory to which you're installing contains binaries for $OS_STORED."
				read -p "Are you sure you want to continue (y/n)? " yn
				case $yn in
					[Yy]* ) break;;
					[Nn]* ) echo "Quitting."; exit -1;;
					* ) echo "Please answer yes or no.";;
				esac
			done
		fi
	fi
fi

# Decide on mode of operation
case "$1" in
install)
	MODE=install
	mkdir -p "$ROOT" || { echo "Failed to create $ROOT. Do you have the necessary permissions?" 1>&2; exit -1; }
	[[ -w "$ROOT" ]] || { echo "$ROOT is not writable. Do you have permissions to write there?" 1>&2; exit -1; }
	[[ -e $ROOT && ! -z $(ls -A "$ROOT") ]] && { echo "$ROOT already has some content; did you mean to run '$CMD update'?." 1>&2; exit -1; }
	;;
update)
	MODE=update
	mkdir -p "$ROOT" || { echo "Failed to create $ROOT. Do you have the necessary permissions??" 1>&2; exit -1; }
	[[ -w "$ROOT" ]] || { echo "$ROOT is not writable. Do you have permissions to write there?" 1>&2; exit -1; }
	;;
*)
	usage
esac

ROOT=$(cd "$ROOT" && pwd)

checkPrereq "$OS"

URL="$URLBASE/$OS/"
echo "Installing to $ROOT"
echo "Downloading using rsync from $URL"
n=0
while read line; do
	n=$((n+1))
	[[ $((n % 1000)) == 0 ]] && { echo -n '#'; }
done < <(rsync --out-format='%n %b/%l' -azHS --delete --no-super "$URL" "$ROOT")
[[ $n -ge 1000 ]] && echo ""
echo "$n files updated."

BUILDROOT=$(sed -n 's/export LSST_HOME=\(.*\)/\1/p' "$ROOT/loadLSST.sh")
if [[ $ROOT != "$BUILDROOT" ]]; then
	echo "=== Binary distribution was built in $BUILDROOT."
	echo "=== You've installed it in $ROOT."
	echo "=== THIS FEATURE IS EXPERIMENTAL. FOR MAXIMUM COMPATIBILITY,"
	echo "=== INSTALL IN '$BUILDROOT'."
	(
		# The two-step process is to avoid making a replacement in the same file twice
		# (e.g., if the file is accessible through a symlink, and the replacement still
		# matches the pattern). One could do the same by sorting on inode
		cd "$ROOT"
		grep -Rl --exclude '*.pyc' --exclude '*~' "$BUILDROOT" eups loadLSST.* | xargs sed -i\~ "s|$BUILDROOT|__DUMMYPATTERN__|"
		grep -Rl --exclude '*.pyc' --exclude '*~' "__DUMMYPATTERN__" eups loadLSST.* | xargs sed -i\~\~ "s|__DUMMYPATTERN__|$ROOT|"
	)
fi

if [[ $MODE == "install" ]]; then
cat <<-EOF;

	Done. The LSST Data Management stack has been installed in:
	
	    $ROOT

	. If using bash, type:

	    source $ROOT/loadLSST.sh

	or, if using csh:

	    source $ROOT/loadLSST.csh

	to load version management with EUPS and begin using it.

	To update the stack in the future, run:
	
	   setup lsst_distrib_tool
	   lsst-distrib update
	   
EOF
fi

echo "Done."
