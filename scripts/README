Scripts for managing binary distributions
=========================================

Introduction
------------

Binary distributions are built on a number of "build hosts". The
configuration for how to build these (and where) is stored in rebuild/$OS
subdirectories, where $OS is a platform string (e.g., rhel-5-x86_64).  The
binaries are copied (actually, rsync-ed) to moya.dev.lsstcorp.org for
distribution via rsync.

The overall configuration is stored in config.sh. Almost all other scripts
source this file for information. The most likely reasons to edit it are to
bump the $DISTRIB_TOOL_TAG number (the tag of lsst_distrib_tool that is to be
installed/distributed with the binary distros, see below), to add new
distributions ($DISTROS variable), and (less frequently) to change the
RELEASE_TAG to point to the EUPS tag of the release to compile to binary.


Build hosts
-----------

Currently, the rebuilds must be run from mjuric's laptop, since
osx-10.7-x86_64 rebuilds happen there ("localhost"). They use mjuric's
credentials to log in as mjuric to all build hosts. Once we find a different
10.7 build host, this will sieze to be necessary.

The build hosts are specified in $OS/host file. The last time this file was
updated, they were:

osx-10.7-x86_64:	localhost (mjuric's MacBook Air)
osx-10.8-x86_64:	opsimblitz1.tuc.noao.edu
rhel-6-x86_64:		moya.dev.lsstcorp.org
rhel-5-x86_64:		build-rhel5 (VM on moya)

The build scripts (see rebuild/README) use ssh to log onto each build host,
and perform the build in /opt/lsst/$OS. Note that you have to have write
permission to /opt/lsst for this to work.

build-rhel5 is a VM on moya (internal IP: 192.168.122.69). To SSH to it, one
needs to use moya as SSH proxy.  Add the following to your ~/.ssh/config
file to make it happen:

====
Host build-rhel5
        ProxyCommand ssh moya.dev.lsstcorp.org 'exec 3<>/dev/tcp/192.168.122.69/22; cat <&3 & cat >&3; kill $!'
====

The incantation lets you do 'ssh build-rhel5' from your machine -- SSH will
proxy the connection through moya.


Rebuilding distributions from scratch
-------------------------------------

Look at rebuild/README for instructions. The distros should *not* be rebuilt
from scratch, unless some catastrophy occured.


Executing a command on all build hosts (deprecated; see below)
--------------------------------------------------------------

Use exec_cmd.sh script, available in the rebuild/ subdirectory. For example:

	source ../../etc/config.sh
	./exec_cmd.sh "eups list lsst_distrib_tool" $DISTROS

will list the versions of lsst_distrib_tool available on each host.


Adding a released package to binary distributions (deprecated; see below)
-------------------------------------------------------------------------

This is useful if (for example) there's a bugfix release of a package that
needs to be added to binary distros. Do:

(
  export PACKAGE=.... &&
  export VERSION=.... &&
  export EUPS_TAG=.... &&
  cd rebuild &&
  source ../../etc/config.sh &&
  ./exec_cmd.sh "eups distrib install --nolocks $PACKAGE $VERSION"    $DISTROS
  ./exec_cmd.sh "eups declare --tag=$EUPS_TAG lsst_distrib_tool $PACKAGE $VERSION" $DISTROS
)


Working with build hosts using ClusterSSH (recommended)
-------------------------------------------------------

ClusterSSH (or cssh; sourceforge.net/projects/clusterssh/) is a tool that
connects via ssh to multiple hosts and directs keyboard input to all of
them. It's as if you're typing on all the connected hosts at the same time.
This is an excellent tool if the same operation needs to be done on all
hosts (e.g., installing a package). Packages for RHEL exist in EPEL, while
Mac packages are available through Macports.

To start a cssh session to all build hosts, setup the lsst_distrib_tool
package and run:

	ldt-cssh

Any arguments you pass to ldt-cssh will be passed to the underlying ssh
instance. This is useful to turn on SSH agent forwarding:

	ldt-cssh -A

Use a predefined alias 'cds' to change into the build directory (otherwise,
since the build directories have platform-dependent names, there would be no
way to do so).

To install new packages, do as you normally would if you were working on a
single build host (e.g., source loadLSST.sh; eups distrib install ...).

To publish (==rsync) the new binary tree to the binary distribution server,
use:

	ldt-publish

Any arguments to ldt-publish will be passed through to rsync. For example,
running:

	ldt-publish -n --progress

is useful to check what ldt-publish would do, before actually doing it.


Re-tagging a release as 'current'
---------------------------------

Typically, once a new release is produced and tested, it should be made
the default (or tagged as "current", in EUPS speak). Use the ldt-eups-retag
utility to do so. For example:

	ldt-eups-retag v6_2 current

will add a tag 'current' to any package that already has a tag 'v6_2'.


Releasing a new version of lsst_distrib_tool
--------------------------------------------

NOTE: release_distrib_tool.sh does everything described below, except step
      1, in one go.

To release a new version of lsst_distrib_tool, do:

1) edit etc/config.sh and change DISTRIB_TOOL_TAG to the tag you want to
release/distribute.

2) run:

	./release_distrib_tool_package.sh

to add the release to the distribution server

3) to add the package to existing binary distributions, run:

	(
	  cd rebuild &&
	  source ../../etc/config.sh &&
	  ./exec_cmd.sh "eups distrib install --nolocks lsst_distrib_tool $DISTRIB_TOOL_VER" $DISTROS
	  ./exec_cmd.sh "eups declare -c lsst_distrib_tool $DISTRIB_TOOL_VER" $DISTROS
	)

4) run

	./release_distrib_tool_webscript.sh

to copy lsst-distrib script to http://lsst-web.ncsa.illinois.edu/~lsstsw/lsst-distrib

5) rsync the distros to rsync server

	(
	  cd rebuild &&
	  source ../../etc/config.sh &&
	  ./rsync_distros.sh $DISTROS
	)

